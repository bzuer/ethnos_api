# Sphinx Configuration for Bibliographic API with Extended Indexes
# Generated: 2025-08-28
# Updated: 2025-08-28 - Added persons_index and organizations_index

source works_src
{
    type = mysql
    sql_host = localhost
    sql_user = api_dev
    sql_pass = s0urc3_v3nv
    sql_db = data_db
    sql_port = 3306
    
    # PHASE 2 query - 10k works with complete author data for RAM testing
    sql_query = \
        SELECT \
            w.id, \
            w.title, \
            COALESCE(w.subtitle, '') as subtitle, \
            COALESCE(w.abstract, '') as abstract, \
            COALESCE(was.author_string, '') as author_string, \
            COALESCE(v.name, '') as venue_name, \
            COALESCE(pub.doi, w.temp_doi, '') as doi, \
            UNIX_TIMESTAMP(w.created_at) as created_ts, \
            COALESCE(pub.year, 0) as year, \
            w.work_type, \
            COALESCE(w.language, 'unknown') as language, \
            COALESCE(pub.open_access, 0) as open_access, \
            COALESCE(pub.peer_reviewed, 0) as peer_reviewed \
        FROM works w \
        LEFT JOIN work_author_summary was ON w.id = was.work_id \
        LEFT JOIN publications pub ON w.id = pub.work_id \
        LEFT JOIN venues v ON pub.venue_id = v.id \
        WHERE was.author_string IS NOT NULL \
        ORDER BY w.id ASC \
        LIMIT 10000
        
    # Attributes for filtering and sorting
    sql_attr_uint = year
    sql_attr_uint = created_ts
    sql_attr_uint = open_access
    sql_attr_uint = peer_reviewed
    sql_attr_string = work_type
    sql_attr_string = language
    
    # Text fields for full-text search
    sql_field_string = title
    sql_field_string = subtitle  
    sql_field_string = abstract
    sql_field_string = author_string
    sql_field_string = venue_name
    sql_field_string = doi
}

index works_poc
{
    source = works_src
    path = /var/lib/sphinx/works_poc
    
    # Bibliographic-specific configuration
    morphology = stem_en
    charset_table = 0..9, A..Z->a..z, _, a..z
    
    # Enable exact word matching for DOIs, author names
    index_exact_words = 1
    
    # Enable prefix/suffix search
    min_prefix_len = 3
    expand_keywords = 1
    
    # Word length limits
    min_word_len = 2
    
    # HTML stripping (in case abstracts contain HTML)
    html_strip = 1
    html_remove_elements = style, script
}

# Real-Time index for testing RT functionality  
index works_rt
{
    type = rt
    path = /var/lib/sphinx/works_rt
    
    # RT fields for bibliographic search
    rt_field = title
    rt_field = subtitle
    rt_field = abstract  
    rt_field = author_string
    rt_field = venue_name
    rt_field = doi
    
    # RT attributes for filtering
    rt_attr_uint = year
    rt_attr_uint = created_ts
    rt_attr_uint = open_access
    rt_attr_uint = peer_reviewed
    rt_attr_string = work_type
    rt_attr_string = language
    
    # Same morphology as regular index
    morphology = stem_en
    charset_table = 0..9, A..Z->a..z, _, a..z
    
    index_exact_words = 1
    min_prefix_len = 3
    expand_keywords = 1
    min_word_len = 2
    html_strip = 1
}

indexer
{
    mem_limit = 1024M   # Phase 2: Increased to 1GB for venues+signatures indexes
    max_iops = 100      # Phase 2: Increased IOPS for analytical performance
    max_iosize = 2097152 # 2MB I/O size for large venue/signature datasets
    
    # Logging
    write_buffer = 8M   # Phase 2: Increased buffer for analytical workloads
    max_file_field_buffer = 32M # For venues metadata
}

searchd
{
    # Network settings
    listen = 9312
    listen = 9306:mysql41
    
    # Logging
    log = /var/log/sphinx/searchd.log
    query_log = /var/log/sphinx/query.log  
    query_log_format = sphinxql
    
    # Process settings
    pid_file = /var/run/sphinx/searchd.pid
    
    # Phase 2: Performance settings optimized for analytical workloads
    seamless_rotate = 1     # Rotation without interruption
    preopen_indexes = 1
    unlink_old = 1
    max_children = 15       # Phase 2: Support more parallel analytical queries
    
    # Phase 2: Memory and timeout settings for large datasets
    read_timeout = 10       # Increased for complex venue/signature queries
    
    # Real-time settings
    binlog_path = /var/lib/sphinx/binlog
    binlog_flush = 2
    
    # Performance monitoring
    query_log_min_msec = 100
    
    # Phase 2: Client timeout for analytical queries
    client_timeout = 600    # 10 minutes for complex analytical operations
    
    # Phase 2: Memory pool settings
    read_buffer = 1M        # Analytical query optimization
}

# =============================================================================
# EXTENDED INDEXES FOR HIGH-PRIORITY ENDPOINTS
# =============================================================================

# Persons Search Index - High Priority Integration
source persons_src
{
    type = mysql
    sql_host = localhost
    sql_user = api_dev
    sql_pass = s0urc3_v3nv
    sql_db = data_db
    sql_port = 3306
    
    # Complete persons data for search optimization
    sql_query = \
        SELECT \
            id, \
            COALESCE(preferred_name, '') as preferred_name, \
            COALESCE(given_names, '') as given_names, \
            COALESCE(family_name, '') as family_name, \
            COALESCE(name_variations, '') as name_variations, \
            COALESCE(orcid, '') as orcid, \
            COALESCE(lattes_id, '') as lattes_id, \
            COALESCE(scopus_id, '') as scopus_id, \
            UNIX_TIMESTAMP(created_at) as created_ts, \
            is_verified \
        FROM persons \
        WHERE preferred_name IS NOT NULL AND preferred_name != '' \
        ORDER BY id ASC
        
    # Attributes for filtering and sorting
    sql_attr_uint = created_ts
    sql_attr_uint = is_verified
    
    # Text fields for full-text search
    sql_field_string = preferred_name
    sql_field_string = given_names  
    sql_field_string = family_name
    sql_field_string = name_variations
    sql_field_string = orcid
    sql_field_string = lattes_id
    sql_field_string = scopus_id
}

index persons_poc
{
    source = persons_src
    path = /var/lib/sphinx/persons_poc
    
    # Academic names-specific configuration
    morphology = stem_en
    charset_table = 0..9, A..Z->a..z, _, a..z, -, ., @
    
    # Enable exact matching for names, ORCIDs
    index_exact_words = 1
    
    # Enable prefix search for partial name matching
    min_prefix_len = 2
    expand_keywords = 1
    
    # Word length limits (names can be short)
    min_word_len = 1
    
    # No HTML stripping needed for names
    html_strip = 0
}

# Organizations Search Index - High Priority Integration  
source organizations_src
{
    type = mysql
    sql_host = localhost
    sql_user = api_dev
    sql_pass = s0urc3_v3nv
    sql_db = data_db
    sql_port = 3306
    
    # Complete organizations data for search optimization
    sql_query = \
        SELECT \
            id, \
            name, \
            type, \
            COALESCE(country_code, '') as country_code, \
            COALESCE(city, '') as city, \
            COALESCE(ror_id, '') as ror_id, \
            UNIX_TIMESTAMP(created_at) as created_ts \
        FROM organizations \
        WHERE name IS NOT NULL AND name != '' \
        ORDER BY id ASC
        
    # Attributes for filtering and sorting
    sql_attr_uint = created_ts
    sql_attr_string = type
    sql_attr_string = country_code
    
    # Text fields for full-text search
    sql_field_string = name
    sql_field_string = city
    sql_field_string = ror_id
}

index organizations_poc
{
    source = organizations_src
    path = /var/lib/sphinx/organizations_poc
    
    # Institution names-specific configuration
    morphology = stem_en
    charset_table = 0..9, A..Z->a..z, _, a..z, -, ., &, (, )
    
    # Enable exact matching for institutional names
    index_exact_words = 1
    
    # Enable prefix search for partial institution matching
    min_prefix_len = 3
    expand_keywords = 1
    
    # Word length limits
    min_word_len = 2
    
    # No HTML stripping needed for institution names
    html_strip = 0
}

# =============================================================================
# PHASE 2 - ANALYTICAL OPTIMIZATION INDEXES
# =============================================================================

# Venues Metrics Index - Solve 8.1s performance bottleneck
source venues_metrics_src
{
    type = mysql
    sql_host = localhost
    sql_user = api_dev
    sql_pass = s0urc3_v3nv
    sql_db = data_db
    sql_port = 3306
    
    # Optimized venue metrics query with pre-calculated statistics
    sql_query = \
        SELECT \
            v.id, \
            v.name, \
            v.type, \
            COALESCE(v.issn, '') as issn, \
            COALESCE(v.eissn, '') as eissn, \
            COALESCE(v.scopus_source_id, '') as scopus_source_id, \
            v.publisher_id, \
            COALESCE(v.impact_factor, 0.0) as impact_factor, \
            COUNT(DISTINCT p.work_id) as works_count, \
            COUNT(DISTINCT a.person_id) as unique_authors, \
            MIN(COALESCE(p.year, 2024)) as first_publication_year, \
            MAX(COALESCE(p.year, 2024)) as latest_publication_year, \
            COALESCE(pub.name, '') as publisher_name, \
            UNIX_TIMESTAMP(v.created_at) as created_ts \
        FROM venues v \
        LEFT JOIN publications p ON v.id = p.venue_id \
        LEFT JOIN authorships a ON p.work_id = a.work_id \
        LEFT JOIN publishers pub ON v.publisher_id = pub.id \
        GROUP BY v.id, pub.name \
        ORDER BY works_count DESC, v.id ASC
        
    # Attributes for filtering and sorting
    sql_attr_uint = publisher_id
    sql_attr_uint = works_count
    sql_attr_uint = unique_authors
    sql_attr_uint = first_publication_year
    sql_attr_uint = latest_publication_year
    sql_attr_uint = created_ts
    sql_attr_float = impact_factor
    sql_attr_string = type
    
    # Text fields for full-text search
    sql_field_string = name
    sql_field_string = issn
    sql_field_string = eissn
    sql_field_string = scopus_source_id
    sql_field_string = publisher_name
}

index venues_metrics_poc
{
    source = venues_metrics_src
    path = /var/lib/sphinx/venues_metrics_poc
    
    # Venue-specific configuration for academic journals
    morphology = stem_en
    charset_table = 0..9, A..Z->a..z, _, a..z, -, ., &, :, (, )
    
    # Enable exact matching for ISSN, journal names
    index_exact_words = 1
    
    # Enable prefix search for partial venue matching
    min_prefix_len = 3
    expand_keywords = 1
    
    # Word length limits for academic titles
    min_word_len = 2
    
    # No HTML stripping needed for venue names
    html_strip = 0
}

# Signatures Index - Improve author disambiguation performance
source signatures_src
{
    type = mysql
    sql_host = localhost
    sql_user = api_dev
    sql_pass = s0urc3_v3nv
    sql_db = data_db
    sql_port = 3306
    
    # Alternative signatures query using authorships data
    sql_query = \
        SELECT \
            ROW_NUMBER() OVER (ORDER BY p.id, a.id) as id, \
            COALESCE(a.author_name, p.preferred_name, '') as signature, \
            p.id as person_id, \
            COALESCE(p.preferred_name, '') as person_name, \
            COALESCE(p.given_names, '') as given_names, \
            COALESCE(p.family_name, '') as family_name, \
            COALESCE(p.is_verified, 0) as is_verified, \
            UNIX_TIMESTAMP(p.created_at) as created_ts, \
            LENGTH(COALESCE(a.author_name, p.preferred_name, '')) as signature_length \
        FROM persons p \
        LEFT JOIN authorships a ON p.id = a.person_id \
        WHERE (a.author_name IS NOT NULL OR p.preferred_name IS NOT NULL) \
        AND LENGTH(COALESCE(a.author_name, p.preferred_name, '')) > 1 \
        GROUP BY p.id, a.author_name, p.preferred_name, p.given_names, p.family_name, p.is_verified, p.created_at, a.id \
        ORDER BY p.is_verified DESC, p.id ASC \
        LIMIT 100000
        
    # Attributes for filtering and sorting
    sql_attr_uint = person_id
    sql_attr_uint = is_verified
    sql_attr_uint = created_ts
    sql_attr_uint = signature_length
    
    # Text fields for full-text search and disambiguation
    sql_field_string = signature
    sql_field_string = person_name
    sql_field_string = given_names
    sql_field_string = family_name
}

index signatures_poc
{
    source = signatures_src
    path = /var/lib/sphinx/signatures_poc
    
    # Author signature-specific configuration
    morphology = stem_en
    charset_table = 0..9, A..Z->a..z, _, a..z, -, ., &, U+002C, ;
    
    # Enable exact matching for author signatures
    index_exact_words = 1
    
    # Enable prefix search for partial name matching
    min_prefix_len = 2
    expand_keywords = 1
    
    # Word length limits (author names can be short)
    min_word_len = 1
    
    # No HTML stripping needed for names
    html_strip = 0
}